'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

class SelectController extends fields.default {
  constructor(config, ...args) {
    const defaultValue = 'defaultValue' in config ? config.defaultValue : null;
    super(_objectSpread({}, config, {
      defaultValue
    }), ...args);

    _defineProperty(this, "getFilterGraphQL", ({
      value: {
        inverted,
        options
      }
    }) => {
      const isMulti = options.length > 1;
      let key = this.path;

      if (isMulti && inverted) {
        key = "".concat(this.path, "_not_in");
      } else if (isMulti) {
        key = "".concat(this.path, "_in");
      } else if (inverted) {
        key = "".concat(this.path, "_not");
      }

      const value = isMulti ? options.map(x => x.value).join(',') : options[0].value;
      return "".concat(key, ": ").concat(value);
    });

    _defineProperty(this, "getFilterLabel", () =>
    /*{ value }*/
    {
      return this.label;
    });

    _defineProperty(this, "formatFilter", ({
      value
    }) => {
      if (!value.options.length) {
        return value.inverted ? "".concat(this.label, " is set") : "".concat(this.label, " has no value");
      }

      if (value.options.length > 1) {
        const values = value.options.map(i => i.label).join(', ');
        return value.inverted ? "".concat(this.label, " is not in [").concat(values, "]") : "".concat(this.label, " is in [").concat(values, "]");
      }

      const optionLabel = value.options[0].label;
      return value.inverted ? "".concat(this.label, " is not ").concat(optionLabel) : "".concat(this.label, " is ").concat(optionLabel);
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Matches',
      getInitialValue: () => ({
        inverted: false,
        options: []
      })
    }]);

    this.options = this.config.options;
  }

}

exports.default = SelectController;
