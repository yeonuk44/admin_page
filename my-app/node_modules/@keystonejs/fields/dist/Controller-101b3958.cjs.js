'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require("@babel/runtime/helpers/classCallCheck");

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

class UuidController extends fields.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      switch (type) {
        case 'is':
          {
            return "".concat(this.path, ": \"").concat(value, "\"");
          }

        case 'not':
          {
            return "".concat(this.path, "_not: \"").concat(value, "\"");
          }

        case 'in':
          {
            return "".concat(this.path, "_in: [").concat(value.split(',').map(value => "\"".concat(value.trim(), "\"")).join(','), "]");
          }

        case 'not_in':
          {
            return "".concat(this.path, "_not_in: [").concat(value.split(',').map(value => "\"".concat(value.trim(), "\"")).join(','), "]");
          }
      }
    });

    _defineProperty(this, "getFilterLabel", ({
      label,
      type
    }) => {
      let suffix = '';

      if (['in', 'not_in'].includes(type)) {
        suffix = ' (comma separated)';
      }

      return "".concat(this.label, " ").concat(label.toLowerCase()).concat(suffix);
    });

    _defineProperty(this, "formatFilter", ({
      label,
      type,
      value
    }) => {
      let renderedValue = value;

      if (['in', 'not_in'].includes(type)) {
        renderedValue = value.split(',').map(value => value.trim()).join(', ');
      }

      return "".concat(this.label, " ").concat(label.toLowerCase(), ": ").concat(renderedValue);
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => ''
    }, {
      type: 'in',
      label: 'Is one of',
      getInitialValue: () => ''
    }, {
      type: 'not_in',
      label: 'Is not one of',
      getInitialValue: () => ''
    }]);
  }

}

exports.default = UuidController;
