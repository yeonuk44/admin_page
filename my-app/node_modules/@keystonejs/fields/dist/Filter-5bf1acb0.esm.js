import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import { jsx } from '@emotion/core';
import { Fragment } from 'react';
import _extends from '@babel/runtime/helpers/esm/extends';
import Select from '@arch-ui/select';
import { Options, OptionPrimitive, CheckMark } from '@arch-ui/options';
import { RadioGroup, Radio } from '@arch-ui/filters';
import { gridSize } from '@arch-ui/theme';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const EventCatcher = props => jsx("div", _extends({
  onClick: e => {
    e.preventDefault();
    e.stopPropagation();
  }
}, props));

const SelectWrapper = props => jsx("div", _extends({
  css: {
    marginTop: gridSize * 2
  }
}, props));

const SelectFilterView = ({
  innerRef,
  field,
  value,
  onChange
}) => {
  const handleRadioChange = newValue => {
    const inverted = newValue === 'does_match' ? false : true;
    onChange(_objectSpread({}, value, {
      inverted
    }));
  };

  const handleSelectChange = newValue => {
    const options = [].concat(newValue); // ensure consistent data shape

    onChange(_objectSpread({}, value, {
      options
    }));
  };

  const radioValue = value.inverted ? 'does_not_match' : 'does_match';
  const selectProps = {
    components: {
      Option: CheckMarkOption
    },
    innerRef: innerRef,
    onChange: handleSelectChange,
    options: field.options,
    placeholder: 'Select...',
    value: value.options
  };
  return jsx(Fragment, null, jsx(RadioGroup, {
    onChange: handleRadioChange,
    value: radioValue
  }, jsx(Radio, {
    value: "does_match"
  }, "Matches"), jsx(Radio, {
    value: "does_not_match"
  }, "Does not match")), jsx(SelectWrapper, null, field.options.length > 8 ? jsx(EventCatcher, null, jsx(Select, _extends({
    menuPortalTarget: document.body
  }, selectProps))) : jsx(Options, _extends({
    displaySearch: false
  }, selectProps))));
};

const CheckMarkOption = _ref => {
  let {
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children"]);

  return jsx(OptionPrimitive, props, jsx("span", null, children), jsx(CheckMark, {
    isFocused: props.isFocused,
    isSelected: props.isSelected
  }));
};

export default SelectFilterView;
